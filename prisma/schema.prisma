generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "sqlserver"
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ActivityTyre {
  id              Int       @id @default(autoincrement())
  unitId          Int
  hmAtActivity    Int
  kmAtActivity    Int
  location        String?
  removedTyreId   Int?
  tread1Remove    Float?
  tread2Remove    Float?
  removeReasonId  String?   @db.VarChar(10)
  removePurposeId Int?
  installedTyreId Int?
  tread1Install   Float?
  tread2Install   Float?
  airConditionId  Int?
  airPressure     Int?
  manpower        String?
  dateTimeWork    DateTime?
  dateTimeDone    DateTime?
  createdAt       DateTime  @default(now())
  tyrePosition    Int?

  airCondition  AirCondition?    @relation(fields: [airConditionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  installedTyre Tyre?            @relation("InstalledTyre", fields: [installedTyreId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  removedTyre   Tyre?            @relation("RemovedTyre", fields: [removedTyreId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  removePurpose RemovePurpose?   @relation(fields: [removePurposeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  removeReason  RemoveReason?    @relation(fields: [removeReasonId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  unit          Unit             @relation(fields: [unitId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  inspections   InspectionTyre[]
}

model InspectionTyre {
  id              Int       @id @default(autoincrement())
  tyreId          Int
  activityTyreId  Int?
  removeReason    String?
  otd             Float?
  treadRemaining  Float?
  treadValue      Float?
  ageTotal        Int?
  installDate     DateTime?
  removeDate      DateTime?
  ageFront        Int?
  ageRear         Int?
  incidentNote    String?
  analysisNote    String?
  removePurposeId Int?
  inspectedBy     String?
  dateTimeIn      DateTime
  dateTimeWork    DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  positionTyre    Int?
  unitId          Int?
  isDone          Boolean?  @default(false)

  activityTyre  ActivityTyre?  @relation(fields: [activityTyreId], references: [id])
  removePurpose RemovePurpose? @relation(fields: [removePurposeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tyre          Tyre           @relation(fields: [tyreId], references: [id])
  actionTyre    ActionTyre?    @relation(fields: [actionTyreId], references: [id])
  actionTyreId  Int?
}

model ActionTyre {
  id              Int            @id @default(autoincrement())
  tyreId          Int?
  removePurposeId Int?
  removePurpose   RemovePurpose? @relation(fields: [removePurposeId], references: [id])
  isDone          Boolean        @default(false)
  dateTimeIn      DateTime?
  dateTimeWork    DateTime?
  dateTimeDone    DateTime?
  createdAt       DateTime       @default(now())

  inspections InspectionTyre[]
  tyre        Tyre?            @relation(fields: [tyreId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Tyre {
  id               Int      @id @default(autoincrement())
  tread1           Float?
  tread2           Float?
  isInstalled      Boolean  @default(false)
  isReady          Boolean  @default(false)
  isScrap          Boolean  @default(false)
  positionTyre     Int?
  installedUnitId  Int?
  removedPurposeId Int?
  stockTyreId      Int      @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  hmTyre           Int?
  kmTyre           Int?

  installedUnit  Unit?          @relation("TyreInstalledUnit", fields: [installedUnitId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  removedPurpose RemovePurpose? @relation(fields: [removedPurposeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stockTyre      StockTyre      @relation(fields: [stockTyreId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  installedActivities ActivityTyre[] @relation("InstalledTyre")
  removedActivities   ActivityTyre[] @relation("RemovedTyre")

  inspections InspectionTyre[]
  actionTyre  ActionTyre[]
  unitTyre1   Unit?            @relation("UnitTyre1")
  unitTyre2   Unit?            @relation("UnitTyre2")
  unitTyre3   Unit?            @relation("UnitTyre3")
  unitTyre4   Unit?            @relation("UnitTyre4")
  unitTyre5   Unit?            @relation("UnitTyre5")
  unitTyre6   Unit?            @relation("UnitTyre6")

  isDeleted Boolean   @default(false) // ← Soft delete flag
  deletedAt DateTime? // ← Soft delete timestamp
  deletedBy String? // ← Soft delete user
}

model StockTyre {
  id           Int      @id @default(autoincrement())
  serialNumber String   @unique
  merkId       Int
  type         String?
  pattern      String?
  price        Int?
  tyreSizeId   Int
  otd1         Int?
  otd2         Int?
  oHM          Int?     @default(0)
  oKM          Int?     @default(0)
  merk         Merk     @relation(fields: [merkId], references: [id])
  tyreSize     TyreSize @relation(fields: [tyreSizeId], references: [id])
  tyre         Tyre?
}

model TyreSize {
  id        Int         @id @default(autoincrement())
  size      String      @unique
  stockTyre StockTyre[]
}

model Unit {
  id        Int     @id @default(autoincrement())
  nomorUnit String  @unique
  hmUnit    Int
  kmUnit    Int
  siteId    Int
  location  String?

  tyre1Id Int? @unique
  tyre2Id Int? @unique
  tyre3Id Int? @unique
  tyre4Id Int? @unique
  tyre5Id Int? @unique
  tyre6Id Int? @unique

  site       Site           @relation(fields: [siteId], references: [id])
  activities ActivityTyre[]

  tyre1 Tyre? @relation("UnitTyre1", fields: [tyre1Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tyre2 Tyre? @relation("UnitTyre2", fields: [tyre2Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tyre3 Tyre? @relation("UnitTyre3", fields: [tyre3Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tyre4 Tyre? @relation("UnitTyre4", fields: [tyre4Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tyre5 Tyre? @relation("UnitTyre5", fields: [tyre5Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tyre6 Tyre? @relation("UnitTyre6", fields: [tyre6Id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  tyresInstalled Tyre[] @relation("TyreInstalledUnit")
}

model AirCondition {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  activityTyre ActivityTyre[]
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
}

model Merk {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  stockTyres StockTyre[]
}

model RemovePurpose {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  activityTyre   ActivityTyre[]
  InspectionTyre InspectionTyre[]
  tyres          Tyre[]
  ActionTyre     ActionTyre[]
}

model RemoveReason {
  id           String         @id @db.VarChar(10)
  description  String
  activityTyre ActivityTyre[]
}

model RoleUser {
  id   Int    @id @default(autoincrement())
  name String @unique
  user User[]
}

model Site {
  id   Int    @id @default(autoincrement())
  name String @unique
  unit Unit[]
}

model User {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  password String
  roleId   Int
  roleUser RoleUser @relation(fields: [roleId], references: [id])
}
