generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  // provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ActivityTyre {
  id              Int       @id @default(autoincrement())
  unitId          Int
  hmAtActivity    Int
  kmAtActivity    Int
  location        String?
  removedTyreId   Int?
  tread1Remove    Float?
  tread2Remove    Float?
  removeReasonId  String?   @db.VarChar(10)
  removePurposeId Int?
  installedTyreId Int?
  tread1Install   Float?
  tread2Install   Float?
  airConditionId  Int?
  airPressure     Int?
  manpower        String?
  dateTimeWork    DateTime?
  dateTimeDone    DateTime?
  createdAt       DateTime  @default(now())
  tyrePosition    Int?

  airCondition  AirCondition?    @relation(fields: [airConditionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  installedTyre Tyre?            @relation("InstalledTyre", fields: [installedTyreId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  removedTyre   Tyre?            @relation("RemovedTyre", fields: [removedTyreId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  removePurpose RemovePurpose?   @relation(fields: [removePurposeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  removeReason  RemoveReason?    @relation(fields: [removeReasonId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  unit          Unit             @relation(fields: [unitId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  inspections   InspectionTyre[]
}

model InspectionTyre {
  id              Int       @id @default(autoincrement())
  tyreId          Int
  activityTyreId  Int?
  removeReason    String?
  otd             Float?
  treadRemaining  Float?
  treadValue      Float?
  ageTotal        Int?
  installDate     DateTime?
  removeDate      DateTime?
  ageFront        Int?
  ageRear         Int?
  incidentNote    String?
  analysisNote    String?
  removePurposeId Int?
  inspectedBy     String?
  dateTimeIn      DateTime
  dateTimeWork    DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  positionTyre    Int?
  unitId          Int?
  isDone          Boolean?  @default(false)

  activityTyre  ActivityTyre?  @relation(fields: [activityTyreId], references: [id])
  removePurpose RemovePurpose? @relation(fields: [removePurposeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tyre          Tyre           @relation(fields: [tyreId], references: [id])
  actionTyre    ActionTyre?    @relation(fields: [actionTyreId], references: [id])
  actionTyreId  Int?
}

model ActionTyre {
  id              Int            @id @default(autoincrement())
  tyreId          Int?
  removePurposeId Int?
  removePurpose   RemovePurpose? @relation(fields: [removePurposeId], references: [id])
  isDone          Boolean        @default(false)
  dateTimeIn      DateTime?
  dateTimeWork    DateTime?
  dateTimeDone    DateTime?
  createdAt       DateTime       @default(now())

  inspections InspectionTyre[]
  tyre        Tyre?            @relation(fields: [tyreId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Tyre {
  id               Int     @id @default(autoincrement())
  tread1           Float?
  tread2           Float?
  isInstalled      Boolean @default(false)
  isReady          Boolean @default(false)
  isScrap          Boolean @default(false)
  positionTyre     Int?
  installedUnitId  Int?
  removedPurposeId Int?
  stockTyreId      Int     @unique
  hmTyre           Int?
  kmTyre           Int?

  siteId Int?
  site   Site? @relation(fields: [siteId], references: [id])

  installedUnit  Unit?          @relation("TyreInstalledUnit", fields: [installedUnitId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  removedPurpose RemovePurpose? @relation(fields: [removedPurposeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stockTyre      StockTyre      @relation(fields: [stockTyreId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  installedActivities ActivityTyre[]   @relation("InstalledTyre")
  removedActivities   ActivityTyre[]   @relation("RemovedTyre")
  inspections         InspectionTyre[]
  actionTyre          ActionTyre[]

  // Posisi ban pada unit (bisa banyak tergantung history pemasangan)
  unitPositions UnitTyrePosition[]

  dateTimeWork DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  isDeleted Boolean   @default(false)
  deletedAt DateTime?
  deletedBy String?
}

model StockTyre {
  id             Int       @id @default(autoincrement())
  serialNumber   String    @unique
  merkId         Int
  type           String?
  pattern        String?
  price          Int?
  tyreSizeId     Int
  otd1           Int?
  otd2           Int?
  oHM            Int?      @default(0)
  oKM            Int?      @default(0)
  dateTimeIn     DateTime?
  dateTimeUpdate DateTime?
  merk           Merk      @relation(fields: [merkId], references: [id])
  tyreSize       TyreSize  @relation(fields: [tyreSizeId], references: [id])
  tyre           Tyre?
}

model TyreSize {
  id        Int         @id @default(autoincrement())
  size      String      @unique
  stockTyre StockTyre[]
}

model Unit {
  id        Int     @id @default(autoincrement())
  nomorUnit String  @unique
  hmUnit    Int     @default(0)
  kmUnit    Int     @default(0)
  siteId    Int
  location  String?

  site       Site           @relation(fields: [siteId], references: [id])
  activities ActivityTyre[]

  // Konfigurasi jumlah ban
  unitTyreAmountId Int?
  UnitTyreAmount   UnitTyreAmount?    @relation(fields: [unitTyreAmountId], references: [id])
  // Ban yang terpasang pada unit (melalui UnitTyrePosition)
  tyres            UnitTyrePosition[]

  tyresInstalled Tyre[] @relation("TyreInstalledUnit")

  dateTimeIn     DateTime?
  dateTimeUpdate DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model UnitTyrePosition {
  id       Int  @id @default(autoincrement())
  unitId   Int?
  tyreId   Int?
  position Int? // Posisi 1 s.d. N

  unit Unit? @relation(fields: [unitId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tyre Tyre? @relation(fields: [tyreId], references: [id])

  @@unique([unitId, position]) // 1 posisi hanya bisa diisi 1 ban
}

model UnitTyreAmount {
  id     Int    @id @default(autoincrement())
  amount Int    @unique
  unit   Unit[]
}

model AirCondition {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  activityTyre ActivityTyre[]
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
}

model Merk {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  stockTyres StockTyre[]
}

model RemovePurpose {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  activityTyre   ActivityTyre[]
  InspectionTyre InspectionTyre[]
  tyres          Tyre[]
  ActionTyre     ActionTyre[]
}

model RemoveReason {
  id           String         @id @db.VarChar(10)
  description  String
  activityTyre ActivityTyre[]
}

model RoleUser {
  id   Int    @id @default(autoincrement())
  name String @unique
  user User[]
}

model Site {
  id   Int    @id @default(autoincrement())
  name String @unique
  unit Unit[]
  tyre Tyre[]
}

model User {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  password String
  roleId   Int
  roleUser RoleUser @relation(fields: [roleId], references: [id])
}
